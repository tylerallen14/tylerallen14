{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/tylerallen14/tylerallen14/blob/main/PA_errors_python.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "raw",
      "metadata": {
        "id": "Wm7rfPnRrrqm"
      },
      "source": [
        "---\n",
        "title: 'Practice Activity: Basic Syntax'\n",
        "output: html\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0mbR_4URrrqo"
      },
      "source": [
        "## Overview\n",
        "\n",
        "In this PA, you will will be creating and manipulating basic objects to uncover a top secret message.\n",
        "\n",
        "### Hint 1\n",
        "\n",
        "As you work through this PA, you will encounter some code that does not work as you want it to.  Don't despair!  Errors (when R is unable to run your code) and bugs (when the code doesn't do what you hoped) are a natural part of coding.  Even the best of the best deal with these problems regularly - learning to track down the issue is a skill that you can learn and practice.\n",
        "\n",
        "Google is your friend!  If an error is confusing, copy it into Google and see what other people are saying.  If you don't know how to do something, search for it.\n",
        "\n",
        "### Hint 2\n",
        "\n",
        "Just because there is no error message doesn't mean everything went smoothly.  You should be regularly printing out your objects, to see they contain the information and format that you expect.\n",
        "\n",
        "For example, if you have an object named `my_thing`, you might first want to simply look at the object by typing its name.\n",
        "\n",
        "However, you might also want to make sure it is the right **object type** and/or the right **object structure**.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D5pSzgxjrrqq",
        "collapsed": true
      },
      "source": [
        "type(my_thing)\n",
        "len(my_thing)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QpUJsmq0rrqr"
      },
      "source": [
        "## Part One: Setup\n",
        "\n",
        "Each of the following code chunks will cause an error and/or do the desired task incorrectly.  Find the mistake, and correct it to complete the intended action.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "1. Create lists containing the upper case letters, lower case letters, and some punctuation marks.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tk5bezBJrrqs"
      },
      "source": [
        "lower_case = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n",
        "\n",
        "upper_case = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\" \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n",
        "\n",
        "punctuation = [\".\", \",\", \"!\", \"?\", \"'\", '\"', \"(\", \")\", \" \", \"-\", \";\", \":\"]"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZejwK6urrrqs"
      },
      "source": [
        "2. Make one long list containing all the symbols.  Find the length of this list.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l8ZVLLXWrrqs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50d23666-6de8-4a8a-c243-747070461d5d"
      },
      "source": [
        "all_symbols = lower_case + upper_case + punctuation\n",
        "\n",
        "len(all_symbols)"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "63"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HvgV76Dbrrqt"
      },
      "source": [
        "3. Repeat the previous steps, but instead of using *list* type objects, use **numpy arrays**.  Don't forget to **import** the numpy library!\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x9YyIMP6rrqt"
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "lower_case = np.array([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"])\n",
        "\n",
        "upper_case = np.array([\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"])\n",
        "\n",
        "punctuation = np.array([\".\", \",\", \"!\", \"?\", \"'\", \"\\\"\", \"(\", \")\", \" \", \"-\", \";\", \":\"])\n",
        "\n",
        "## Use np.concatenate to combine into long array\n",
        "all_symbols = np.concatenate((lower_case, upper_case, punctuation))"
      ],
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rpbAtPlXrrqt"
      },
      "source": [
        "4. Make a **pandas data frame**, with one column called \"Symbol\" containing the `all_symbols` array.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K103ZvNVrrqu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "ea880816-e04a-4cdb-b861-4018e41a0886"
      },
      "source": [
        "import pandas as pd\n",
        "\n",
        "symbols_df = pd.DataFrame(all_symbols)\n",
        "\n",
        "symbols_df.rename(columns = {0:\"Symbol\"}, inplace=True)\n",
        "symbols_df"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Symbol\n",
              "0       a\n",
              "1       b\n",
              "2       c\n",
              "3       d\n",
              "4       e\n",
              "..    ...\n",
              "59      )\n",
              "60       \n",
              "61      -\n",
              "62      ;\n",
              "63      :\n",
              "\n",
              "[64 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b93fcbde-a60d-421a-bf80-16120884a1d3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Symbol</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>b</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>c</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>d</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>e</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>)</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td></td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>-</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>;</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>:</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>64 rows Ã— 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b93fcbde-a60d-421a-bf80-16120884a1d3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b93fcbde-a60d-421a-bf80-16120884a1d3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b93fcbde-a60d-421a-bf80-16120884a1d3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d879be16-3131-40f4-bd69-0c7d97a88446\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d879be16-3131-40f4-bd69-0c7d97a88446')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d879be16-3131-40f4-bd69-0c7d97a88446 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_92c9e710-7e6e-4c28-9dab-508192c3a183\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('symbols_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_92c9e710-7e6e-4c28-9dab-508192c3a183 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('symbols_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "symbols_df",
              "summary": "{\n  \"name\": \"symbols_df\",\n  \"rows\": 64,\n  \"fields\": [\n    {\n      \"column\": \"Symbol\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 64,\n        \"samples\": [\n          \".\",\n          \"(\",\n          \"a\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L-m2LLyHrrqu"
      },
      "source": [
        "## Part Two: Decoding the secret message.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iP7Zj5hPrrqu"
      },
      "source": [
        "top_secret = pd.read_csv(\"https://www.dropbox.com/s/k72h1zewk4gtqep/PA_Secret_Code?dl=1\", header=None)\n",
        "\n",
        "top_secret = top_secret[0].to_numpy()"
      ],
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "T3ui38Z9rrqu"
      },
      "source": [
        "### Hint\n",
        "\n",
        "Recall that basic math operations are **vectorized**.  This means you don't have to repeat the process for each item in a list; you can apply the math to the whole thing at once.\n",
        "\n",
        "### Instructions\n",
        "\n",
        "By altering this top secret set of numbers, you will be able to create a message.  Write your own code to complete the steps below.\n",
        "\n",
        "1. Add 14 to every number.\n",
        "2. Multiply every number by 18, then subtract 257.\n",
        "3. Exponentiate every number.  (That is, do e^[number].  You may have to Google how to do this!)\n",
        "4. Square every number.\n",
        "\n",
        "\n",
        "**Checkpoint:** Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17.  Write code to check if this is true for your data.\n",
        "\n",
        "\n",
        "5. Turn your one-dimensional array of numbers into a two-dimensional array (matrix) with 5 columns. This conversion should be **column-wise**; that is, the first several elements of the array should all end up in the first **column** of your matrix.\n",
        "6. Separately from your top secret numbers, create an array of all the even numbers between 1 and 382. Name it \"evens\". That is, \"evens\" should contain 2, 4, 6, 8 ..., 382.\n",
        "7. Subtract the \"evens\" vector from the first column of your secret message matrix.\n",
        "8. Subtract 100 from all numbers in the 18-24th rows of the 3rd column.\n",
        "9. Multiply all numbers in the 4th and 5th column by 2.\n",
        "10. Turn your matrix back into a one dimensional array. Again this should be **column-wise**, so that the first column of the matrix becomes the first elements of the array.\n",
        "\n",
        "\n",
        "**Checkpoint:** Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100.  Write code to check if your numbers fulfill this requirement.\n",
        "\n",
        "11. Take the square root of all numbers in indices 37 to 464.\n",
        "12. Round all numbers to the nearest whole number.\n",
        "13. Replace all instances of the number 39 with 20.\n",
        "\n",
        "**Checkpoint:** Headquarters has informed you that your final message should have 344 even numbers.  Write code to check if your numbers fulfill this requirement.\n",
        "\n",
        "## Part 3: The secret message!\n",
        "\n",
        "Run the following to discover the final message!  Google the first line of this message, if you do not recognize it, to see what it is.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "v_bB8VNvrrqu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 287
        },
        "collapsed": true,
        "outputId": "0cb75c7b-24c0-4ca6-a4a9-1b645611f982"
      },
      "source": [
        "''.join(map(str, symbols_df.loc[top_secret-1]['Symbol']))"
      ],
      "execution_count": 135,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Cannot index with multidimensional key",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-135-c58a911fb445>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m''\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msymbols_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtop_secret6\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Symbol'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1152\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1153\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1154\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1155\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1378\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mMultiIndex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ndim\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1380\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Cannot index with multidimensional key\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1381\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1382\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_iterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: Cannot index with multidimensional key"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret1 = top_secret + 14\n",
        "top_secret2 = top_secret1 * 18 - 257\n",
        "top_secret3 = np.exp(top_secret2)\n",
        "top_secret4 = top_secret3 ** 2"
      ],
      "metadata": {
        "id": "-oWzfTwqS83M"
      },
      "execution_count": 148,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "count = (top_secret4 < 17).sum()\n",
        "print(count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5zvoaQ1ETdLp",
        "outputId": "29e6f0ce-96ff-45e8-9bd4-8340f1f4bd05"
      },
      "execution_count": 149,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "352\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret5 = top_secret4.reshape(-1, 5, order='F')\n",
        "print(top_secret5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "JV1HvphmHUjg",
        "outputId": "eea0263e-f2dd-4139-e179-866941a50e6a"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  59.   144.   361.     9.    20.5]\n",
            " [  50.     1.  1521.     7.5   30.5]\n",
            " [  29.   529.   225.    10.5    3. ]\n",
            " [   9.   361.   225.     3.5    9. ]\n",
            " [  29.  3721.    16.     4.     0.5]\n",
            " [  73.  1521.  3721.    30.5    1. ]\n",
            " [  16.    64.     1.     0.5    5. ]\n",
            " [  34.     1.   529.     7.     7.5]\n",
            " [  27.  1521.    64.     2.    10.5]\n",
            " [  32.  3721.    81.    30.5    9.5]\n",
            " [  34.     9.   144.    19.5   30.5]\n",
            " [  33.     1.    25.     4.     2. ]\n",
            " [  33.  1521.  3721.     9.     0.5]\n",
            " [  82.     9.    81.     7.5   12.5]\n",
            " [  91.    64.   196.    10.5   27.5]\n",
            " [  33.  3025.  3721.     3.5   30.5]\n",
            " [  48.  3721.  1521.     4.    14.5]\n",
            " [  40.   784.   164.    30.5    0.5]\n",
            " [  99.    25.   325.    30.5    6. ]\n",
            " [  79.   529.   541.    30.5    6. ]\n",
            " [  50.     1.   149.    23.     7.5]\n",
            " [  49.   324.   164.     4.     7.5]\n",
            " [ 107.    25.  1621.     2.5    4. ]\n",
            " [  67.  3721.  2909.    30.5   27.5]\n",
            " [  62.  1521.  3721.    11.    30.5]\n",
            " [  61.    64.   729.     7.5   14.5]\n",
            " [  93.    25.   196.     9.     0.5]\n",
            " [  64.  3721.    16.     8.     6. ]\n",
            " [  83.  1296.  2916.     0.5    6. ]\n",
            " [ 121.   441.  3721.     6.     0.5]\n",
            " [ 101.     4.     1.    30.5   12.5]\n",
            " [  79.   100.   361.     1.    27.5]\n",
            " [  88.   441.  3721.     6.    29. ]\n",
            " [  73.     4.    81.     0.5   30.5]\n",
            " [  89.  3721.   196.     2.    30.5]\n",
            " [ 133.     4.  3721.     2.5   30.5]\n",
            " [ 135.    81.   441.    30.5   17. ]\n",
            " [3797.   324.    36.    11.5    2.5]\n",
            " [ 978.    16.    36.     2.5   30.5]\n",
            " [ 161.  2916.    81.     7.     1.5]\n",
            " [  98.  3721.   361.    19.5    4. ]\n",
            " [3805.     1.    64.    30.5    7.5]\n",
            " [ 135.   196.  3721.     9.5    9. ]\n",
            " [ 713.    16.  1521.     7.    19.5]\n",
            " [ 414.  3721.    64.     4.5    6. ]\n",
            " [ 117.   361.   225.     1.5    2.5]\n",
            " [3815.    64.   441.     5.5    2. ]\n",
            " [  97.   441.    49.     2.5   30.5]\n",
            " [ 294.   196.    64.     9.     4.5]\n",
            " [ 116.  3721.  1521.    31.     7. ]\n",
            " [3823.  3721.  3721.     9.5   30.5]\n",
            " [ 153.  3721.    64.     7.     4. ]\n",
            " [ 187.  2116.    25.     0.5    4.5]\n",
            " [ 277.    64.  3721.     1.5    9.5]\n",
            " [ 114.    25.   361.     5.5   30.5]\n",
            " [ 256.  3721.  1521.    27.5    5. ]\n",
            " [ 139.    36.   225.    30.5    7.5]\n",
            " [3837.   324.   225.    17.    12.5]\n",
            " [ 199.   441.    16.     2.5   26.5]\n",
            " [ 316.   169.  2916.    30.5   30.5]\n",
            " [3843.    81.  3721.     6.    28.5]\n",
            " [1645.   225.  3721.     2.5   23. ]\n",
            " [ 190.   441.  3721.     3.    11.5]\n",
            " [ 153.   361.  2116.    19.5    0.5]\n",
            " [3851.  3721.    64.    30.5    9.5]\n",
            " [ 661.   784.    25.     4.5   30.5]\n",
            " [ 135.     1.  3721.    19.5    1. ]\n",
            " [ 140.   196.  1296.    30.5    9. ]\n",
            " [ 163.    16.     1.     2.     4.5]\n",
            " [4236.    25.     4.     2.5    6. ]\n",
            " [3863.   324.     4.     0.5    6. ]\n",
            " [ 873.   361.    25.     2.     4.5]\n",
            " [ 290.   196.   324.    27.     3.5]\n",
            " [ 292.     1.   529.    30.5   27. ]\n",
            " [3871.  1521.   225.     0.5   30.5]\n",
            " [ 321.     9.     9.     7.     0.5]\n",
            " [ 235.    64.   121.     2.     7. ]\n",
            " [ 325.  3025.  2916.    30.5    2. ]\n",
            " [ 519.  3364.  3721.    11.5   30.5]\n",
            " [ 785.  3721.   529.     4.5   19.5]\n",
            " [3883.  1156.    81.    19.5    4. ]\n",
            " [ 693.    25.  1521.     4.     2.5]\n",
            " [ 191.  3721.    64.    30.5   30.5]\n",
            " [ 492.  1521.    61.     4.5    9.5]\n",
            " [ 195.   225.     5.    19.5    6. ]\n",
            " [3893.   225.    25.     9.5    4.5]\n",
            " [1695.   121.     5.    30.5   19.5]\n",
            " [ 240.  3721.    19.     4.     4. ]\n",
            " [ 203.    64.    61.     2.5   12.5]\n",
            " [3901.    81.    15.     0.5   30.5]\n",
            " [ 186.   361.     6.     2.    19.5]\n",
            " [ 409.  3721.    61.    30.5    7.5]\n",
            " [ 510.   484.     6.    30.5   11. ]\n",
            " [ 413.   225.    12.    30.5    2.5]\n",
            " [ 239.   324.     1.    17.     9.5]\n",
            " [ 417.   256.    13.     2.5   30.5]\n",
            " [ 678.     1.     5.    30.5   30.5]\n",
            " [ 221.   144.    54.    11.5   30.5]\n",
            " [ 559.  3721.    61.     2.5   15. ]\n",
            " [3116.   361.    29.     7.     4.5]\n",
            " [3923.   529.     1.    19.5    2. ]\n",
            " [3925.   225.    13.    30.5   30.5]\n",
            " [3927.   324.     5.     3.5    3.5]\n",
            " [ 937.    16.    61.     0.5   12.5]\n",
            " [ 406.  3721.    23.     6.     9. ]\n",
            " [ 228.    81.     8.    10.5    2.5]\n",
            " [3935.   196.     9.     6.5   30.5]\n",
            " [1737.  3721.     6.     8.     0.5]\n",
            " [ 282.    64.     6.     4.     7. ]\n",
            " [ 245.     1.    12.     4.5    2. ]\n",
            " [3943.   196.     9.     7.    30.5]\n",
            " [ 393.    16.    14.     3.5    3.5]\n",
            " [ 451.  3969.     7.    30.5    4.5]\n",
            " [ 397.  3721.    61.     1.     6.5]\n",
            " [ 255.  3721.    39.     0.5    1. ]\n",
            " [3953.  3721.     8.     1.5    6. ]\n",
            " [ 558.  1444.    18.     5.5    2.5]\n",
            " [ 237.   225.    15.    26.5   30.5]\n",
            " [1759.   196.    21.    30.5    4.5]\n",
            " [ 304.    49.     7.    29.     7. ]\n",
            " [ 603.  3721.     8.    13.5   30.5]\n",
            " [3965.  1521.    61.     7.    19.5]\n",
            " [ 471.    81.    39.     2.     4. ]\n",
            " [ 689.   169.     8.    30.5    2.5]\n",
            " [1771.    25.     5.     4.    30.5]\n",
            " [ 301.  3721.    61.     0.5   11.5]\n",
            " [ 578.  1521.    39.     9.5    0.5]\n",
            " [ 257.    64.    21.    19.5    1. ]\n",
            " [ 262.    25.    12.    30.5    2.5]\n",
            " [ 285.  3721.     7.    19.5   32. ]\n",
            " [3071.   169.     5.     4.    30.5]\n",
            " [3985.     1.    25.     7.5   13.5]\n",
            " [3630.   196.    61.    10.5    6. ]\n",
            " [1052.   576.    23.    30.5    6. ]\n",
            " [ 295.   225.    15.     9.5   30.5]\n",
            " [ 801.   169.    15.     6.     6.5]\n",
            " [ 275.    25.     4.     0.5    4.5]\n",
            " [ 600.  3721.    54.     4.5    6.5]\n",
            " [ 303.    36.    61.     7.     9.5]\n",
            " [4001.   225.    61.    30.5   12.5]\n",
            " [1803.    25.    61.    19.5   30.5]\n",
            " [ 348.  3721.    27.     4.    11.5]\n",
            " [ 311.    64.    14.     2.5    2.5]\n",
            " [4009.    25.     4.    30.5    9. ]\n",
            " [1586.  3721.    61.    18.     2.5]\n",
            " [ 293.   361.     2.     0.5   30.5]\n",
            " [ 298.   225.    21.     1.    19.5]\n",
            " [ 300.   441.    18.     1.     4. ]\n",
            " [ 323.    49.     2.     2.5    2.5]\n",
            " [ 624.    64.    12.     9.    30.5]\n",
            " [ 831.  1521.     5.    11.5    1. ]\n",
            " [ 529.  3844.     4.     7.5    7.5]\n",
            " [ 315.  3721.    61.     1.5    9. ]\n",
            " [ 429.  2025.     1.     5.5    7.5]\n",
            " [3226.   225.    19.    28.     3.5]\n",
            " [4033.  3721.    61.    30.5    7.5]\n",
            " [ 483.   324.     9.    30.5   11. ]\n",
            " [ 941.    25.    39.    30.5    2.5]\n",
            " [4039.   361.    61.    14.5    9.5]\n",
            " [ 681.  1521.     3.     7.5   27. ]\n",
            " [ 547.    25.     1.     6.5   30.5]\n",
            " [ 520.    16.    13.     2.5   30.5]\n",
            " [3351.  3721.     5.    30.5   30.5]\n",
            " [4049.    64.    55.    19.5   13.5]\n",
            " [4051.    25.    61.     7.5    7. ]\n",
            " [4053.  3721.    41.    30.5    2. ]\n",
            " [2450.     4.    14.     6.5   30.5]\n",
            " [ 400.   625.     5.    12.5   19.5]\n",
            " [ 363.  3721.    54.    30.5    4. ]\n",
            " [4061.  1521.    61.     0.5    2.5]\n",
            " [ 442.    64.    39.     9.    30.5]\n",
            " [ 345.    25.    23.     6.5    6.5]\n",
            " [ 875.  3721.    15.     9.5    7.5]\n",
            " [ 709.  2116.    55.    27.     6.5]\n",
            " [4071.   441.    61.    30.5    2.5]\n",
            " [1873.   169.    41.     6.5   30.5]\n",
            " [ 418.  1521.    14.    12.5    9. ]\n",
            " [ 357.   441.     5.    30.5    0.5]\n",
            " [1879.   169.    54.     1.    19.5]\n",
            " [4081.  3721.    61.     2.5    4. ]\n",
            " [ 366.  1521.    39.     0.5    9.5]\n",
            " [ 445.   324.    23.     6.5   30.5]\n",
            " [1887.    25.    15.     4.5    7.5]\n",
            " [ 393.    25.    55.     9.5   10.5]\n",
            " [3286.  3721.    61.     4.    19.5]\n",
            " [4093.  3721.    27.    30.5    3.5]\n",
            " [1895.  3721.    14.     1.     9. ]\n",
            " [ 440.   729.     4.     7.5    0.5]\n",
            " [ 403.   196.    61.    12.5    1. ]\n",
            " [4101.    16.    39.    27.5    2.5]\n",
            " [ 391.  3721.     8.    30.5   26.5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "evens = np.arange(2, 383, 2)\n",
        "\n",
        "print(evens)"
      ],
      "metadata": {
        "collapsed": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1ilXxg0oW3Ts",
        "outputId": "b6c7052c-b85c-444a-d906-f2d936e6559d"
      },
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[  2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36\n",
            "  38  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72\n",
            "  74  76  78  80  82  84  86  88  90  92  94  96  98 100 102 104 106 108\n",
            " 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144\n",
            " 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180\n",
            " 182 184 186 188 190 192 194 196 198 200 202 204 206 208 210 212 214 216\n",
            " 218 220 222 224 226 228 230 232 234 236 238 240 242 244 246 248 250 252\n",
            " 254 256 258 260 262 264 266 268 270 272 274 276 278 280 282 284 286 288\n",
            " 290 292 294 296 298 300 302 304 306 308 310 312 314 316 318 320 322 324\n",
            " 326 328 330 332 334 336 338 340 342 344 346 348 350 352 354 356 358 360\n",
            " 362 364 366 368 370 372 374 376 378 380 382]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret5[:, 0] = top_secret5[:, 0] - evens\n",
        "print(top_secret5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "hGO3Sr1JFPDs",
        "outputId": "0609e7be-768b-419a-e7fa-8272559b44d0"
      },
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  57.   144.   361.     9.    20.5]\n",
            " [  46.     1.  1521.     7.5   30.5]\n",
            " [  23.   529.   225.    10.5    3. ]\n",
            " [   1.   361.   225.     3.5    9. ]\n",
            " [  19.  3721.    16.     4.     0.5]\n",
            " [  61.  1521.  3721.    30.5    1. ]\n",
            " [   2.    64.     1.     0.5    5. ]\n",
            " [  18.     1.   529.     7.     7.5]\n",
            " [   9.  1521.    64.     2.    10.5]\n",
            " [  12.  3721.    81.    30.5    9.5]\n",
            " [  12.     9.   144.    19.5   30.5]\n",
            " [   9.     1.    25.     4.     2. ]\n",
            " [   7.  1521.  3721.     9.     0.5]\n",
            " [  54.     9.    81.     7.5   12.5]\n",
            " [  61.    64.   196.    10.5   27.5]\n",
            " [   1.  3025.  3721.     3.5   30.5]\n",
            " [  14.  3721.  1521.     4.    14.5]\n",
            " [   4.   784.   164.    30.5    0.5]\n",
            " [  61.    25.   325.    30.5    6. ]\n",
            " [  39.   529.   541.    30.5    6. ]\n",
            " [   8.     1.   149.    23.     7.5]\n",
            " [   5.   324.   164.     4.     7.5]\n",
            " [  61.    25.  1621.     2.5    4. ]\n",
            " [  19.  3721.  2909.    30.5   27.5]\n",
            " [  12.  1521.  3721.    11.    30.5]\n",
            " [   9.    64.   729.     7.5   14.5]\n",
            " [  39.    25.   196.     9.     0.5]\n",
            " [   8.  3721.    16.     8.     6. ]\n",
            " [  25.  1296.  2916.     0.5    6. ]\n",
            " [  61.   441.  3721.     6.     0.5]\n",
            " [  39.     4.     1.    30.5   12.5]\n",
            " [  15.   100.   361.     1.    27.5]\n",
            " [  22.   441.  3721.     6.    29. ]\n",
            " [   5.     4.    81.     0.5   30.5]\n",
            " [  19.  3721.   196.     2.    30.5]\n",
            " [  61.     4.  3721.     2.5   30.5]\n",
            " [  61.    81.   441.    30.5   17. ]\n",
            " [3721.   324.    36.    11.5    2.5]\n",
            " [ 900.    16.    36.     2.5   30.5]\n",
            " [  81.  2916.    81.     7.     1.5]\n",
            " [  16.  3721.   361.    19.5    4. ]\n",
            " [3721.     1.    64.    30.5    7.5]\n",
            " [  49.   196.  3721.     9.5    9. ]\n",
            " [ 625.    16.  1521.     7.    19.5]\n",
            " [ 324.  3721.    64.     4.5    6. ]\n",
            " [  25.   361.   225.     1.5    2.5]\n",
            " [3721.    64.   441.     5.5    2. ]\n",
            " [   1.   441.    49.     2.5   30.5]\n",
            " [ 196.   196.    64.     9.     4.5]\n",
            " [  16.  3721.  1521.    31.     7. ]\n",
            " [3721.  3721.  3721.     9.5   30.5]\n",
            " [  49.  3721.    64.     7.     4. ]\n",
            " [  81.  2116.    25.     0.5    4.5]\n",
            " [ 169.    64.  3721.     1.5    9.5]\n",
            " [   4.    25.   361.     5.5   30.5]\n",
            " [ 144.  3721.  1521.    27.5    5. ]\n",
            " [  25.    36.   225.    30.5    7.5]\n",
            " [3721.   324.   225.    17.    12.5]\n",
            " [  81.   441.    16.     2.5   26.5]\n",
            " [ 196.   169.  2916.    30.5   30.5]\n",
            " [3721.    81.  3721.     6.    28.5]\n",
            " [1521.   225.  3721.     2.5   23. ]\n",
            " [  64.   441.  3721.     3.    11.5]\n",
            " [  25.   361.  2116.    19.5    0.5]\n",
            " [3721.  3721.    64.    30.5    9.5]\n",
            " [ 529.   784.    25.     4.5   30.5]\n",
            " [   1.     1.  3721.    19.5    1. ]\n",
            " [   4.   196.  1296.    30.5    9. ]\n",
            " [  25.    16.     1.     2.     4.5]\n",
            " [4096.    25.     4.     2.5    6. ]\n",
            " [3721.   324.     4.     0.5    6. ]\n",
            " [ 729.   361.    25.     2.     4.5]\n",
            " [ 144.   196.   324.    27.     3.5]\n",
            " [ 144.     1.   529.    30.5   27. ]\n",
            " [3721.  1521.   225.     0.5   30.5]\n",
            " [ 169.     9.     9.     7.     0.5]\n",
            " [  81.    64.   121.     2.     7. ]\n",
            " [ 169.  3025.  2916.    30.5    2. ]\n",
            " [ 361.  3364.  3721.    11.5   30.5]\n",
            " [ 625.  3721.   529.     4.5   19.5]\n",
            " [3721.  1156.    81.    19.5    4. ]\n",
            " [ 529.    25.  1521.     4.     2.5]\n",
            " [  25.  3721.    64.    30.5   30.5]\n",
            " [ 324.  1521.    61.     4.5    9.5]\n",
            " [  25.   225.     5.    19.5    6. ]\n",
            " [3721.   225.    25.     9.5    4.5]\n",
            " [1521.   121.     5.    30.5   19.5]\n",
            " [  64.  3721.    19.     4.     4. ]\n",
            " [  25.    64.    61.     2.5   12.5]\n",
            " [3721.    81.    15.     0.5   30.5]\n",
            " [   4.   361.     6.     2.    19.5]\n",
            " [ 225.  3721.    61.    30.5    7.5]\n",
            " [ 324.   484.     6.    30.5   11. ]\n",
            " [ 225.   225.    12.    30.5    2.5]\n",
            " [  49.   324.     1.    17.     9.5]\n",
            " [ 225.   256.    13.     2.5   30.5]\n",
            " [ 484.     1.     5.    30.5   30.5]\n",
            " [  25.   144.    54.    11.5   30.5]\n",
            " [ 361.  3721.    61.     2.5   15. ]\n",
            " [2916.   361.    29.     7.     4.5]\n",
            " [3721.   529.     1.    19.5    2. ]\n",
            " [3721.   225.    13.    30.5   30.5]\n",
            " [3721.   324.     5.     3.5    3.5]\n",
            " [ 729.    16.    61.     0.5   12.5]\n",
            " [ 196.  3721.    23.     6.     9. ]\n",
            " [  16.    81.     8.    10.5    2.5]\n",
            " [3721.   196.     9.     6.5   30.5]\n",
            " [1521.  3721.     6.     8.     0.5]\n",
            " [  64.    64.     6.     4.     7. ]\n",
            " [  25.     1.    12.     4.5    2. ]\n",
            " [3721.   196.     9.     7.    30.5]\n",
            " [ 169.    16.    14.     3.5    3.5]\n",
            " [ 225.  3969.     7.    30.5    4.5]\n",
            " [ 169.  3721.    61.     1.     6.5]\n",
            " [  25.  3721.    39.     0.5    1. ]\n",
            " [3721.  3721.     8.     1.5    6. ]\n",
            " [ 324.  1444.    18.     5.5    2.5]\n",
            " [   1.   225.    15.    26.5   30.5]\n",
            " [1521.   196.    21.    30.5    4.5]\n",
            " [  64.    49.     7.    29.     7. ]\n",
            " [ 361.  3721.     8.    13.5   30.5]\n",
            " [3721.  1521.    61.     7.    19.5]\n",
            " [ 225.    81.    39.     2.     4. ]\n",
            " [ 441.   169.     8.    30.5    2.5]\n",
            " [1521.    25.     5.     4.    30.5]\n",
            " [  49.  3721.    61.     0.5   11.5]\n",
            " [ 324.  1521.    39.     9.5    0.5]\n",
            " [   1.    64.    21.    19.5    1. ]\n",
            " [   4.    25.    12.    30.5    2.5]\n",
            " [  25.  3721.     7.    19.5   32. ]\n",
            " [2809.   169.     5.     4.    30.5]\n",
            " [3721.     1.    25.     7.5   13.5]\n",
            " [3364.   196.    61.    10.5    6. ]\n",
            " [ 784.   576.    23.    30.5    6. ]\n",
            " [  25.   225.    15.     9.5   30.5]\n",
            " [ 529.   169.    15.     6.     6.5]\n",
            " [   1.    25.     4.     0.5    4.5]\n",
            " [ 324.  3721.    54.     4.5    6.5]\n",
            " [  25.    36.    61.     7.     9.5]\n",
            " [3721.   225.    61.    30.5   12.5]\n",
            " [1521.    25.    61.    19.5   30.5]\n",
            " [  64.  3721.    27.     4.    11.5]\n",
            " [  25.    64.    14.     2.5    2.5]\n",
            " [3721.    25.     4.    30.5    9. ]\n",
            " [1296.  3721.    61.    18.     2.5]\n",
            " [   1.   361.     2.     0.5   30.5]\n",
            " [   4.   225.    21.     1.    19.5]\n",
            " [   4.   441.    18.     1.     4. ]\n",
            " [  25.    49.     2.     2.5    2.5]\n",
            " [ 324.    64.    12.     9.    30.5]\n",
            " [ 529.  1521.     5.    11.5    1. ]\n",
            " [ 225.  3844.     4.     7.5    7.5]\n",
            " [   9.  3721.    61.     1.5    9. ]\n",
            " [ 121.  2025.     1.     5.5    7.5]\n",
            " [2916.   225.    19.    28.     3.5]\n",
            " [3721.  3721.    61.    30.5    7.5]\n",
            " [ 169.   324.     9.    30.5   11. ]\n",
            " [ 625.    25.    39.    30.5    2.5]\n",
            " [3721.   361.    61.    14.5    9.5]\n",
            " [ 361.  1521.     3.     7.5   27. ]\n",
            " [ 225.    25.     1.     6.5   30.5]\n",
            " [ 196.    16.    13.     2.5   30.5]\n",
            " [3025.  3721.     5.    30.5   30.5]\n",
            " [3721.    64.    55.    19.5   13.5]\n",
            " [3721.    25.    61.     7.5    7. ]\n",
            " [3721.  3721.    41.    30.5    2. ]\n",
            " [2116.     4.    14.     6.5   30.5]\n",
            " [  64.   625.     5.    12.5   19.5]\n",
            " [  25.  3721.    54.    30.5    4. ]\n",
            " [3721.  1521.    61.     0.5    2.5]\n",
            " [ 100.    64.    39.     9.    30.5]\n",
            " [   1.    25.    23.     6.5    6.5]\n",
            " [ 529.  3721.    15.     9.5    7.5]\n",
            " [ 361.  2116.    55.    27.     6.5]\n",
            " [3721.   441.    61.    30.5    2.5]\n",
            " [1521.   169.    41.     6.5   30.5]\n",
            " [  64.  1521.    14.    12.5    9. ]\n",
            " [   1.   441.     5.    30.5    0.5]\n",
            " [1521.   169.    54.     1.    19.5]\n",
            " [3721.  3721.    61.     2.5    4. ]\n",
            " [   4.  1521.    39.     0.5    9.5]\n",
            " [  81.   324.    23.     6.5   30.5]\n",
            " [1521.    25.    15.     4.5    7.5]\n",
            " [  25.    25.    55.     9.5   10.5]\n",
            " [2916.  3721.    61.     4.    19.5]\n",
            " [3721.  3721.    27.    30.5    3.5]\n",
            " [1521.  3721.    14.     1.     9. ]\n",
            " [  64.   729.     4.     7.5    0.5]\n",
            " [  25.   196.    61.    12.5    1. ]\n",
            " [3721.    16.    39.    27.5    2.5]\n",
            " [   9.  3721.     8.    30.5   26.5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret5[17:24, 2] = top_secret5[17:24, 2] - 100\n",
        "\n",
        "print(top_secret5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "Z_imWy0pXhmh",
        "outputId": "bad087c4-e190-4043-a8f0-5958daf06722"
      },
      "execution_count": 153,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  57.   144.   361.     9.    20.5]\n",
            " [  46.     1.  1521.     7.5   30.5]\n",
            " [  23.   529.   225.    10.5    3. ]\n",
            " [   1.   361.   225.     3.5    9. ]\n",
            " [  19.  3721.    16.     4.     0.5]\n",
            " [  61.  1521.  3721.    30.5    1. ]\n",
            " [   2.    64.     1.     0.5    5. ]\n",
            " [  18.     1.   529.     7.     7.5]\n",
            " [   9.  1521.    64.     2.    10.5]\n",
            " [  12.  3721.    81.    30.5    9.5]\n",
            " [  12.     9.   144.    19.5   30.5]\n",
            " [   9.     1.    25.     4.     2. ]\n",
            " [   7.  1521.  3721.     9.     0.5]\n",
            " [  54.     9.    81.     7.5   12.5]\n",
            " [  61.    64.   196.    10.5   27.5]\n",
            " [   1.  3025.  3721.     3.5   30.5]\n",
            " [  14.  3721.  1521.     4.    14.5]\n",
            " [   4.   784.    64.    30.5    0.5]\n",
            " [  61.    25.   225.    30.5    6. ]\n",
            " [  39.   529.   441.    30.5    6. ]\n",
            " [   8.     1.    49.    23.     7.5]\n",
            " [   5.   324.    64.     4.     7.5]\n",
            " [  61.    25.  1521.     2.5    4. ]\n",
            " [  19.  3721.  2809.    30.5   27.5]\n",
            " [  12.  1521.  3721.    11.    30.5]\n",
            " [   9.    64.   729.     7.5   14.5]\n",
            " [  39.    25.   196.     9.     0.5]\n",
            " [   8.  3721.    16.     8.     6. ]\n",
            " [  25.  1296.  2916.     0.5    6. ]\n",
            " [  61.   441.  3721.     6.     0.5]\n",
            " [  39.     4.     1.    30.5   12.5]\n",
            " [  15.   100.   361.     1.    27.5]\n",
            " [  22.   441.  3721.     6.    29. ]\n",
            " [   5.     4.    81.     0.5   30.5]\n",
            " [  19.  3721.   196.     2.    30.5]\n",
            " [  61.     4.  3721.     2.5   30.5]\n",
            " [  61.    81.   441.    30.5   17. ]\n",
            " [3721.   324.    36.    11.5    2.5]\n",
            " [ 900.    16.    36.     2.5   30.5]\n",
            " [  81.  2916.    81.     7.     1.5]\n",
            " [  16.  3721.   361.    19.5    4. ]\n",
            " [3721.     1.    64.    30.5    7.5]\n",
            " [  49.   196.  3721.     9.5    9. ]\n",
            " [ 625.    16.  1521.     7.    19.5]\n",
            " [ 324.  3721.    64.     4.5    6. ]\n",
            " [  25.   361.   225.     1.5    2.5]\n",
            " [3721.    64.   441.     5.5    2. ]\n",
            " [   1.   441.    49.     2.5   30.5]\n",
            " [ 196.   196.    64.     9.     4.5]\n",
            " [  16.  3721.  1521.    31.     7. ]\n",
            " [3721.  3721.  3721.     9.5   30.5]\n",
            " [  49.  3721.    64.     7.     4. ]\n",
            " [  81.  2116.    25.     0.5    4.5]\n",
            " [ 169.    64.  3721.     1.5    9.5]\n",
            " [   4.    25.   361.     5.5   30.5]\n",
            " [ 144.  3721.  1521.    27.5    5. ]\n",
            " [  25.    36.   225.    30.5    7.5]\n",
            " [3721.   324.   225.    17.    12.5]\n",
            " [  81.   441.    16.     2.5   26.5]\n",
            " [ 196.   169.  2916.    30.5   30.5]\n",
            " [3721.    81.  3721.     6.    28.5]\n",
            " [1521.   225.  3721.     2.5   23. ]\n",
            " [  64.   441.  3721.     3.    11.5]\n",
            " [  25.   361.  2116.    19.5    0.5]\n",
            " [3721.  3721.    64.    30.5    9.5]\n",
            " [ 529.   784.    25.     4.5   30.5]\n",
            " [   1.     1.  3721.    19.5    1. ]\n",
            " [   4.   196.  1296.    30.5    9. ]\n",
            " [  25.    16.     1.     2.     4.5]\n",
            " [4096.    25.     4.     2.5    6. ]\n",
            " [3721.   324.     4.     0.5    6. ]\n",
            " [ 729.   361.    25.     2.     4.5]\n",
            " [ 144.   196.   324.    27.     3.5]\n",
            " [ 144.     1.   529.    30.5   27. ]\n",
            " [3721.  1521.   225.     0.5   30.5]\n",
            " [ 169.     9.     9.     7.     0.5]\n",
            " [  81.    64.   121.     2.     7. ]\n",
            " [ 169.  3025.  2916.    30.5    2. ]\n",
            " [ 361.  3364.  3721.    11.5   30.5]\n",
            " [ 625.  3721.   529.     4.5   19.5]\n",
            " [3721.  1156.    81.    19.5    4. ]\n",
            " [ 529.    25.  1521.     4.     2.5]\n",
            " [  25.  3721.    64.    30.5   30.5]\n",
            " [ 324.  1521.    61.     4.5    9.5]\n",
            " [  25.   225.     5.    19.5    6. ]\n",
            " [3721.   225.    25.     9.5    4.5]\n",
            " [1521.   121.     5.    30.5   19.5]\n",
            " [  64.  3721.    19.     4.     4. ]\n",
            " [  25.    64.    61.     2.5   12.5]\n",
            " [3721.    81.    15.     0.5   30.5]\n",
            " [   4.   361.     6.     2.    19.5]\n",
            " [ 225.  3721.    61.    30.5    7.5]\n",
            " [ 324.   484.     6.    30.5   11. ]\n",
            " [ 225.   225.    12.    30.5    2.5]\n",
            " [  49.   324.     1.    17.     9.5]\n",
            " [ 225.   256.    13.     2.5   30.5]\n",
            " [ 484.     1.     5.    30.5   30.5]\n",
            " [  25.   144.    54.    11.5   30.5]\n",
            " [ 361.  3721.    61.     2.5   15. ]\n",
            " [2916.   361.    29.     7.     4.5]\n",
            " [3721.   529.     1.    19.5    2. ]\n",
            " [3721.   225.    13.    30.5   30.5]\n",
            " [3721.   324.     5.     3.5    3.5]\n",
            " [ 729.    16.    61.     0.5   12.5]\n",
            " [ 196.  3721.    23.     6.     9. ]\n",
            " [  16.    81.     8.    10.5    2.5]\n",
            " [3721.   196.     9.     6.5   30.5]\n",
            " [1521.  3721.     6.     8.     0.5]\n",
            " [  64.    64.     6.     4.     7. ]\n",
            " [  25.     1.    12.     4.5    2. ]\n",
            " [3721.   196.     9.     7.    30.5]\n",
            " [ 169.    16.    14.     3.5    3.5]\n",
            " [ 225.  3969.     7.    30.5    4.5]\n",
            " [ 169.  3721.    61.     1.     6.5]\n",
            " [  25.  3721.    39.     0.5    1. ]\n",
            " [3721.  3721.     8.     1.5    6. ]\n",
            " [ 324.  1444.    18.     5.5    2.5]\n",
            " [   1.   225.    15.    26.5   30.5]\n",
            " [1521.   196.    21.    30.5    4.5]\n",
            " [  64.    49.     7.    29.     7. ]\n",
            " [ 361.  3721.     8.    13.5   30.5]\n",
            " [3721.  1521.    61.     7.    19.5]\n",
            " [ 225.    81.    39.     2.     4. ]\n",
            " [ 441.   169.     8.    30.5    2.5]\n",
            " [1521.    25.     5.     4.    30.5]\n",
            " [  49.  3721.    61.     0.5   11.5]\n",
            " [ 324.  1521.    39.     9.5    0.5]\n",
            " [   1.    64.    21.    19.5    1. ]\n",
            " [   4.    25.    12.    30.5    2.5]\n",
            " [  25.  3721.     7.    19.5   32. ]\n",
            " [2809.   169.     5.     4.    30.5]\n",
            " [3721.     1.    25.     7.5   13.5]\n",
            " [3364.   196.    61.    10.5    6. ]\n",
            " [ 784.   576.    23.    30.5    6. ]\n",
            " [  25.   225.    15.     9.5   30.5]\n",
            " [ 529.   169.    15.     6.     6.5]\n",
            " [   1.    25.     4.     0.5    4.5]\n",
            " [ 324.  3721.    54.     4.5    6.5]\n",
            " [  25.    36.    61.     7.     9.5]\n",
            " [3721.   225.    61.    30.5   12.5]\n",
            " [1521.    25.    61.    19.5   30.5]\n",
            " [  64.  3721.    27.     4.    11.5]\n",
            " [  25.    64.    14.     2.5    2.5]\n",
            " [3721.    25.     4.    30.5    9. ]\n",
            " [1296.  3721.    61.    18.     2.5]\n",
            " [   1.   361.     2.     0.5   30.5]\n",
            " [   4.   225.    21.     1.    19.5]\n",
            " [   4.   441.    18.     1.     4. ]\n",
            " [  25.    49.     2.     2.5    2.5]\n",
            " [ 324.    64.    12.     9.    30.5]\n",
            " [ 529.  1521.     5.    11.5    1. ]\n",
            " [ 225.  3844.     4.     7.5    7.5]\n",
            " [   9.  3721.    61.     1.5    9. ]\n",
            " [ 121.  2025.     1.     5.5    7.5]\n",
            " [2916.   225.    19.    28.     3.5]\n",
            " [3721.  3721.    61.    30.5    7.5]\n",
            " [ 169.   324.     9.    30.5   11. ]\n",
            " [ 625.    25.    39.    30.5    2.5]\n",
            " [3721.   361.    61.    14.5    9.5]\n",
            " [ 361.  1521.     3.     7.5   27. ]\n",
            " [ 225.    25.     1.     6.5   30.5]\n",
            " [ 196.    16.    13.     2.5   30.5]\n",
            " [3025.  3721.     5.    30.5   30.5]\n",
            " [3721.    64.    55.    19.5   13.5]\n",
            " [3721.    25.    61.     7.5    7. ]\n",
            " [3721.  3721.    41.    30.5    2. ]\n",
            " [2116.     4.    14.     6.5   30.5]\n",
            " [  64.   625.     5.    12.5   19.5]\n",
            " [  25.  3721.    54.    30.5    4. ]\n",
            " [3721.  1521.    61.     0.5    2.5]\n",
            " [ 100.    64.    39.     9.    30.5]\n",
            " [   1.    25.    23.     6.5    6.5]\n",
            " [ 529.  3721.    15.     9.5    7.5]\n",
            " [ 361.  2116.    55.    27.     6.5]\n",
            " [3721.   441.    61.    30.5    2.5]\n",
            " [1521.   169.    41.     6.5   30.5]\n",
            " [  64.  1521.    14.    12.5    9. ]\n",
            " [   1.   441.     5.    30.5    0.5]\n",
            " [1521.   169.    54.     1.    19.5]\n",
            " [3721.  3721.    61.     2.5    4. ]\n",
            " [   4.  1521.    39.     0.5    9.5]\n",
            " [  81.   324.    23.     6.5   30.5]\n",
            " [1521.    25.    15.     4.5    7.5]\n",
            " [  25.    25.    55.     9.5   10.5]\n",
            " [2916.  3721.    61.     4.    19.5]\n",
            " [3721.  3721.    27.    30.5    3.5]\n",
            " [1521.  3721.    14.     1.     9. ]\n",
            " [  64.   729.     4.     7.5    0.5]\n",
            " [  25.   196.    61.    12.5    1. ]\n",
            " [3721.    16.    39.    27.5    2.5]\n",
            " [   9.  3721.     8.    30.5   26.5]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret5[:, 3:5] = top_secret5[:, 3:5] * 2\n",
        "\n",
        "print(top_secret5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "roWh7GabXvJT",
        "outputId": "bb4f3165-3888-4267-e30a-938736e45228"
      },
      "execution_count": 154,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[  57.  144.  361.   18.   41.]\n",
            " [  46.    1. 1521.   15.   61.]\n",
            " [  23.  529.  225.   21.    6.]\n",
            " [   1.  361.  225.    7.   18.]\n",
            " [  19. 3721.   16.    8.    1.]\n",
            " [  61. 1521. 3721.   61.    2.]\n",
            " [   2.   64.    1.    1.   10.]\n",
            " [  18.    1.  529.   14.   15.]\n",
            " [   9. 1521.   64.    4.   21.]\n",
            " [  12. 3721.   81.   61.   19.]\n",
            " [  12.    9.  144.   39.   61.]\n",
            " [   9.    1.   25.    8.    4.]\n",
            " [   7. 1521. 3721.   18.    1.]\n",
            " [  54.    9.   81.   15.   25.]\n",
            " [  61.   64.  196.   21.   55.]\n",
            " [   1. 3025. 3721.    7.   61.]\n",
            " [  14. 3721. 1521.    8.   29.]\n",
            " [   4.  784.   64.   61.    1.]\n",
            " [  61.   25.  225.   61.   12.]\n",
            " [  39.  529.  441.   61.   12.]\n",
            " [   8.    1.   49.   46.   15.]\n",
            " [   5.  324.   64.    8.   15.]\n",
            " [  61.   25. 1521.    5.    8.]\n",
            " [  19. 3721. 2809.   61.   55.]\n",
            " [  12. 1521. 3721.   22.   61.]\n",
            " [   9.   64.  729.   15.   29.]\n",
            " [  39.   25.  196.   18.    1.]\n",
            " [   8. 3721.   16.   16.   12.]\n",
            " [  25. 1296. 2916.    1.   12.]\n",
            " [  61.  441. 3721.   12.    1.]\n",
            " [  39.    4.    1.   61.   25.]\n",
            " [  15.  100.  361.    2.   55.]\n",
            " [  22.  441. 3721.   12.   58.]\n",
            " [   5.    4.   81.    1.   61.]\n",
            " [  19. 3721.  196.    4.   61.]\n",
            " [  61.    4. 3721.    5.   61.]\n",
            " [  61.   81.  441.   61.   34.]\n",
            " [3721.  324.   36.   23.    5.]\n",
            " [ 900.   16.   36.    5.   61.]\n",
            " [  81. 2916.   81.   14.    3.]\n",
            " [  16. 3721.  361.   39.    8.]\n",
            " [3721.    1.   64.   61.   15.]\n",
            " [  49.  196. 3721.   19.   18.]\n",
            " [ 625.   16. 1521.   14.   39.]\n",
            " [ 324. 3721.   64.    9.   12.]\n",
            " [  25.  361.  225.    3.    5.]\n",
            " [3721.   64.  441.   11.    4.]\n",
            " [   1.  441.   49.    5.   61.]\n",
            " [ 196.  196.   64.   18.    9.]\n",
            " [  16. 3721. 1521.   62.   14.]\n",
            " [3721. 3721. 3721.   19.   61.]\n",
            " [  49. 3721.   64.   14.    8.]\n",
            " [  81. 2116.   25.    1.    9.]\n",
            " [ 169.   64. 3721.    3.   19.]\n",
            " [   4.   25.  361.   11.   61.]\n",
            " [ 144. 3721. 1521.   55.   10.]\n",
            " [  25.   36.  225.   61.   15.]\n",
            " [3721.  324.  225.   34.   25.]\n",
            " [  81.  441.   16.    5.   53.]\n",
            " [ 196.  169. 2916.   61.   61.]\n",
            " [3721.   81. 3721.   12.   57.]\n",
            " [1521.  225. 3721.    5.   46.]\n",
            " [  64.  441. 3721.    6.   23.]\n",
            " [  25.  361. 2116.   39.    1.]\n",
            " [3721. 3721.   64.   61.   19.]\n",
            " [ 529.  784.   25.    9.   61.]\n",
            " [   1.    1. 3721.   39.    2.]\n",
            " [   4.  196. 1296.   61.   18.]\n",
            " [  25.   16.    1.    4.    9.]\n",
            " [4096.   25.    4.    5.   12.]\n",
            " [3721.  324.    4.    1.   12.]\n",
            " [ 729.  361.   25.    4.    9.]\n",
            " [ 144.  196.  324.   54.    7.]\n",
            " [ 144.    1.  529.   61.   54.]\n",
            " [3721. 1521.  225.    1.   61.]\n",
            " [ 169.    9.    9.   14.    1.]\n",
            " [  81.   64.  121.    4.   14.]\n",
            " [ 169. 3025. 2916.   61.    4.]\n",
            " [ 361. 3364. 3721.   23.   61.]\n",
            " [ 625. 3721.  529.    9.   39.]\n",
            " [3721. 1156.   81.   39.    8.]\n",
            " [ 529.   25. 1521.    8.    5.]\n",
            " [  25. 3721.   64.   61.   61.]\n",
            " [ 324. 1521.   61.    9.   19.]\n",
            " [  25.  225.    5.   39.   12.]\n",
            " [3721.  225.   25.   19.    9.]\n",
            " [1521.  121.    5.   61.   39.]\n",
            " [  64. 3721.   19.    8.    8.]\n",
            " [  25.   64.   61.    5.   25.]\n",
            " [3721.   81.   15.    1.   61.]\n",
            " [   4.  361.    6.    4.   39.]\n",
            " [ 225. 3721.   61.   61.   15.]\n",
            " [ 324.  484.    6.   61.   22.]\n",
            " [ 225.  225.   12.   61.    5.]\n",
            " [  49.  324.    1.   34.   19.]\n",
            " [ 225.  256.   13.    5.   61.]\n",
            " [ 484.    1.    5.   61.   61.]\n",
            " [  25.  144.   54.   23.   61.]\n",
            " [ 361. 3721.   61.    5.   30.]\n",
            " [2916.  361.   29.   14.    9.]\n",
            " [3721.  529.    1.   39.    4.]\n",
            " [3721.  225.   13.   61.   61.]\n",
            " [3721.  324.    5.    7.    7.]\n",
            " [ 729.   16.   61.    1.   25.]\n",
            " [ 196. 3721.   23.   12.   18.]\n",
            " [  16.   81.    8.   21.    5.]\n",
            " [3721.  196.    9.   13.   61.]\n",
            " [1521. 3721.    6.   16.    1.]\n",
            " [  64.   64.    6.    8.   14.]\n",
            " [  25.    1.   12.    9.    4.]\n",
            " [3721.  196.    9.   14.   61.]\n",
            " [ 169.   16.   14.    7.    7.]\n",
            " [ 225. 3969.    7.   61.    9.]\n",
            " [ 169. 3721.   61.    2.   13.]\n",
            " [  25. 3721.   39.    1.    2.]\n",
            " [3721. 3721.    8.    3.   12.]\n",
            " [ 324. 1444.   18.   11.    5.]\n",
            " [   1.  225.   15.   53.   61.]\n",
            " [1521.  196.   21.   61.    9.]\n",
            " [  64.   49.    7.   58.   14.]\n",
            " [ 361. 3721.    8.   27.   61.]\n",
            " [3721. 1521.   61.   14.   39.]\n",
            " [ 225.   81.   39.    4.    8.]\n",
            " [ 441.  169.    8.   61.    5.]\n",
            " [1521.   25.    5.    8.   61.]\n",
            " [  49. 3721.   61.    1.   23.]\n",
            " [ 324. 1521.   39.   19.    1.]\n",
            " [   1.   64.   21.   39.    2.]\n",
            " [   4.   25.   12.   61.    5.]\n",
            " [  25. 3721.    7.   39.   64.]\n",
            " [2809.  169.    5.    8.   61.]\n",
            " [3721.    1.   25.   15.   27.]\n",
            " [3364.  196.   61.   21.   12.]\n",
            " [ 784.  576.   23.   61.   12.]\n",
            " [  25.  225.   15.   19.   61.]\n",
            " [ 529.  169.   15.   12.   13.]\n",
            " [   1.   25.    4.    1.    9.]\n",
            " [ 324. 3721.   54.    9.   13.]\n",
            " [  25.   36.   61.   14.   19.]\n",
            " [3721.  225.   61.   61.   25.]\n",
            " [1521.   25.   61.   39.   61.]\n",
            " [  64. 3721.   27.    8.   23.]\n",
            " [  25.   64.   14.    5.    5.]\n",
            " [3721.   25.    4.   61.   18.]\n",
            " [1296. 3721.   61.   36.    5.]\n",
            " [   1.  361.    2.    1.   61.]\n",
            " [   4.  225.   21.    2.   39.]\n",
            " [   4.  441.   18.    2.    8.]\n",
            " [  25.   49.    2.    5.    5.]\n",
            " [ 324.   64.   12.   18.   61.]\n",
            " [ 529. 1521.    5.   23.    2.]\n",
            " [ 225. 3844.    4.   15.   15.]\n",
            " [   9. 3721.   61.    3.   18.]\n",
            " [ 121. 2025.    1.   11.   15.]\n",
            " [2916.  225.   19.   56.    7.]\n",
            " [3721. 3721.   61.   61.   15.]\n",
            " [ 169.  324.    9.   61.   22.]\n",
            " [ 625.   25.   39.   61.    5.]\n",
            " [3721.  361.   61.   29.   19.]\n",
            " [ 361. 1521.    3.   15.   54.]\n",
            " [ 225.   25.    1.   13.   61.]\n",
            " [ 196.   16.   13.    5.   61.]\n",
            " [3025. 3721.    5.   61.   61.]\n",
            " [3721.   64.   55.   39.   27.]\n",
            " [3721.   25.   61.   15.   14.]\n",
            " [3721. 3721.   41.   61.    4.]\n",
            " [2116.    4.   14.   13.   61.]\n",
            " [  64.  625.    5.   25.   39.]\n",
            " [  25. 3721.   54.   61.    8.]\n",
            " [3721. 1521.   61.    1.    5.]\n",
            " [ 100.   64.   39.   18.   61.]\n",
            " [   1.   25.   23.   13.   13.]\n",
            " [ 529. 3721.   15.   19.   15.]\n",
            " [ 361. 2116.   55.   54.   13.]\n",
            " [3721.  441.   61.   61.    5.]\n",
            " [1521.  169.   41.   13.   61.]\n",
            " [  64. 1521.   14.   25.   18.]\n",
            " [   1.  441.    5.   61.    1.]\n",
            " [1521.  169.   54.    2.   39.]\n",
            " [3721. 3721.   61.    5.    8.]\n",
            " [   4. 1521.   39.    1.   19.]\n",
            " [  81.  324.   23.   13.   61.]\n",
            " [1521.   25.   15.    9.   15.]\n",
            " [  25.   25.   55.   19.   21.]\n",
            " [2916. 3721.   61.    8.   39.]\n",
            " [3721. 3721.   27.   61.    7.]\n",
            " [1521. 3721.   14.    2.   18.]\n",
            " [  64.  729.    4.   15.    1.]\n",
            " [  25.  196.   61.   25.    2.]\n",
            " [3721.   16.   39.   55.    5.]\n",
            " [   9. 3721.    8.   61.   53.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret6 = top_secret5.reshape(-1, order='F')\n",
        "print(top_secret6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "KGG28dmRMOoX",
        "outputId": "f3f5678e-560f-4a41-d54e-11009b297831"
      },
      "execution_count": 158,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[  57.   46.   23.    1.   19.   61.    2.   18.    9.   12.   12.    9.\n",
            "    7.   54.   61.    1.   14.    4.   61.   39.    8.    5.   61.   19.\n",
            "   12.    9.   39.    8.   25.   61.   39.   15.   22.    5.   19.   61.\n",
            "   61. 3721.  900.   81.   16. 3721.   49.  625.  324.   25. 3721.    1.\n",
            "  196.   16. 3721.   49.   81.  169.    4.  144.   25. 3721.   81.  196.\n",
            " 3721. 1521.   64.   25. 3721.  529.    1.    4.   25. 4096. 3721.  729.\n",
            "  144.  144. 3721.  169.   81.  169.  361.  625. 3721.  529.   25.  324.\n",
            "   25. 3721. 1521.   64.   25. 3721.    4.  225.  324.  225.   49.  225.\n",
            "  484.   25.  361. 2916. 3721. 3721. 3721.  729.  196.   16. 3721. 1521.\n",
            "   64.   25. 3721.  169.  225.  169.   25. 3721.  324.    1. 1521.   64.\n",
            "  361. 3721.  225.  441. 1521.   49.  324.    1.    4.   25. 2809. 3721.\n",
            " 3364.  784.   25.  529.    1.  324.   25. 3721. 1521.   64.   25. 3721.\n",
            " 1296.    1.    4.    4.   25.  324.  529.  225.    9.  121. 2916. 3721.\n",
            "  169.  625. 3721.  361.  225.  196. 3025. 3721. 3721. 3721. 2116.   64.\n",
            "   25. 3721.  100.    1.  529.  361. 3721. 1521.   64.    1. 1521. 3721.\n",
            "    4.   81. 1521.   25. 2916. 3721. 1521.   64.   25. 3721.    9.  144.\n",
            "    1.  529.  361. 3721. 1521.   64.    1. 1521. 3721.    9.    1. 1521.\n",
            "    9.   64. 3025. 3721.  784.   25.  529.    1.  324.   25. 3721. 1521.\n",
            "   64.   25. 3721. 1296.  441.    4.  100.  441.    4. 3721.    4.   81.\n",
            "  324.   16. 2916. 3721.    1.  196.   16. 3721.  361.   64.  441.  196.\n",
            " 3721. 3721. 3721. 2116.   64.   25. 3721.   36.  324.  441.  169.   81.\n",
            "  225.  441.  361. 3721.  784.    1.  196.   16.   25.  324.  361.  196.\n",
            "    1. 1521.    9.   64. 3025. 3364. 3721. 1156.   25. 3721. 1521.  225.\n",
            "  225.  121. 3721.   64.   81.  361. 3721.  484.  225.  324.  256.    1.\n",
            "  144. 3721.  361.  529.  225.  324.   16. 3721.   81.  196. 3721.   64.\n",
            "    1.  196.   16. 3969. 3721. 3721. 3721. 1444.  225.  196.   49. 3721.\n",
            " 1521.   81.  169.   25. 3721. 1521.   64.   25. 3721.  169.    1.  196.\n",
            "  576.  225.  169.   25. 3721.   36.  225.   25. 3721.   64.   25. 3721.\n",
            "  361.  225.  441.   49.   64. 1521. 3844. 3721. 2025.  225. 3721.  324.\n",
            "   25.  361. 1521.   25.   16. 3721.   64.   25. 3721.    4.  625. 3721.\n",
            " 1521.   64.   25. 3721. 2116.  441.  169. 1521.  441.  169. 3721. 1521.\n",
            "  324.   25.   25. 3721. 3721. 3721.  729.  196.   16. 3721.  361. 1521.\n",
            "  225.  225.   16. 3721.    1.  529.   64.   81.  144.   25. 3721.   81.\n",
            "  196. 3721. 1521.   64.  225.  441.   49.   64. 1521. 2809. 3721.  729.\n",
            "  196.   16. 2916. 3721.    1.  361. 3721.   81.  196. 3721.  441.   36.\n",
            "   36.   81.  361.   64. 3721. 1521.   64.  225.  441.   49.   64. 1521.\n",
            " 3721.   64.   25. 3721.  361. 1521.  225.  225.   16. 2916. 3721. 3721.\n",
            " 3721. 2116.   64.   25. 3721. 1296.    1.    4.    4.   25.  324.  529.\n",
            "  225.    9.  121. 2916. 3721.  529.   81. 1521.   64.   61.    5.   25.\n",
            "    5.   19.   61.   15.    6.   61.    6.   12.    1.   13.    5.   54.\n",
            "   61.   29.    1.   13.    5.   61.   23.    8.    9.    6.    6.   12.\n",
            "    9.   14.    7.   61.   39.    8.   18.   15.   21.    7.    8.   61.\n",
            "   39.    8.    5.   61.   39.   21.   12.    7.    5.   25.   61.   23.\n",
            "   15.   15.    4.   54.   61.   61.   61.   27.   14.    4.   61.    2.\n",
            "   21.   18.    2.   12.    5.    4.   61.    1.   19.   61.    9.   39.\n",
            "   61.    3.    1.   13.    5.   55.   61.   41.   14.    5.   54.   61.\n",
            "   39.   23.   15.   55.   61.   41.   14.    5.   54.   61.   39.   23.\n",
            "   15.   55.   61.   27.   14.    4.   61.   39.    8.   18.   15.   21.\n",
            "    7.    8.   61.    1.   14.    4.   61.   39.    8.   18.   15.   21.\n",
            "    7.    8.   61.   61.   61.   46.    8.    5.   61.   22.   15.   18.\n",
            "   16.    1.   12.   61.    2.   12.    1.    4.    5.   61.   23.    5.\n",
            "   14.   39.   61.   19.   14.    9.    3.   11.    5.   18.   62.   19.\n",
            "   14.    1.    3.   11.   55.   61.   34.    5.   61.   12.    5.    6.\n",
            "   39.   61.    9.   39.   61.    4.    5.    1.    4.   54.   61.    1.\n",
            "   14.    4.   61.   23.    9.   39.    8.   61.    9.   39.   19.   61.\n",
            "    8.    5.    1.    4.   61.   61.   61.   34.    5.   61.   23.    5.\n",
            "   14.   39.   61.    7.    1.   12.   21.   13.   16.    8.    9.   14.\n",
            "    7.   61.    2.    1.    3.   11.   53.   61.   58.   27.   14.    4.\n",
            "   61.    8.    1.   19.   39.   61.   39.    8.   15.   21.   61.   19.\n",
            "   12.    1.    9.   14.   61.   39.    8.    5.   61.   36.    1.    2.\n",
            "    2.    5.   18.   23.   15.    3.   11.   56.   61.   61.   61.   29.\n",
            "   15.   13.    5.   61.   39.   15.   61.   13.   25.   61.    1.   18.\n",
            "   13.   19.   54.   61.   13.   25.   61.    2.    5.    1.   13.    9.\n",
            "   19.    8.   61.    2.   15.   25.   55.   61.   41.   61.    6.   18.\n",
            "    1.    2.   10.   15.   21.   19.   61.    4.    1.   25.   55.   61.\n",
            "   29.    1.   12.   12.   15.   15.    8.   55.   61.   29.    1.   12.\n",
            "   12.    1.   25.   55.   58.   61.   61.   61.   34.    5.   61.    3.\n",
            "    8.   15.   18.   39.   12.    5.    4.   61.    9.   14.   61.    8.\n",
            "    9.   19.   61.   10.   15.   25.   53.   61.   57.   46.   23.    1.\n",
            "   19.   61.    2.   18.    9.   12.   12.    9.    7.   54.   61.    1.\n",
            "   14.    4.   61.   39.    8.    5.   61.   19.   12.    9.   39.    8.\n",
            "   25.   61.   39.   15.   22.    5.   19.   61.   61.   61.   30.    9.\n",
            "    4.   61.    7.   25.   18.    5.   61.    1.   14.    4.   61.    7.\n",
            "    9.   13.    2.   12.    5.   61.    9.   14.   61.   39.    8.    5.\n",
            "   61.   23.    1.    2.    5.   64.   61.   27.   12.   12.   61.   13.\n",
            "    9.   13.   19.   25.   61.   23.    5.   18.    5.   61.   39.    8.\n",
            "    5.   61.    2.   15.   18.   15.    7.   15.   22.    5.   19.   54.\n",
            "   61.   61.   61.   27.   14.    4.   61.   39.    8.    5.   61.   13.\n",
            "   15.   13.    5.   61.   18.    1.   39.    8.   19.   61.   15.   21.\n",
            "   39.    7.   18.    1.    2.    5.   53.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if all(i < 100 for i in top_secret6[500:]):\n",
        "  print(\"All numbers from index 500 onwards are below 100.\")\n",
        "else:\n",
        "  print(\"Not all numbers from index 500 onwards are below 100.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mqpGZC5cYPEl",
        "outputId": "388a519f-d886-4142-acba-0604a4f288e5"
      },
      "execution_count": 159,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "All numbers from index 500 onwards are below 100.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret6[37:465] = np.sqrt(np.abs(top_secret6[37:465]))\n",
        "\n",
        "print(top_secret6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "5dzuGENUOZjW",
        "outputId": "56af0c21-c3d2-47cf-c1fa-267bf540a833"
      },
      "execution_count": 160,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[57. 46. 23.  1. 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4.\n",
            " 61. 39.  8.  5. 61. 19. 12.  9. 39.  8. 25. 61. 39. 15. 22.  5. 19. 61.\n",
            " 61. 61. 30.  9.  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.\n",
            "  2. 12.  5. 61.  9. 14. 61. 39.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27.\n",
            " 12. 12. 61. 13.  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 39.  8.  5. 61.\n",
            "  2. 15. 18. 15.  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 39.\n",
            "  8.  5. 61. 13. 15. 13.  5. 61. 18.  1. 39.  8. 19. 61. 15. 21. 39.  7.\n",
            " 18.  1.  2.  5. 53. 61. 58. 28.  5. 23.  1. 18.  5. 61. 39.  8.  5. 61.\n",
            " 36.  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 13. 25. 61. 19. 15. 14.\n",
            " 55. 61. 61. 61. 46.  8.  5. 61. 10.  1. 23. 19. 61. 39.  8.  1. 39. 61.\n",
            "  2.  9. 39.  5. 54. 61. 39.  8.  5. 61.  3. 12.  1. 23. 19. 61. 39.  8.\n",
            "  1. 39. 61.  3.  1. 39.  3.  8. 55. 61. 28.  5. 23.  1. 18.  5. 61. 39.\n",
            "  8.  5. 61. 36. 21.  2. 10. 21.  2. 61.  2.  9. 18.  4. 54. 61.  1. 14.\n",
            "  4. 61. 19.  8. 21. 14. 61. 61. 61. 46.  8.  5. 61.  6. 18. 21. 13.  9.\n",
            " 15. 21. 19. 61. 28.  1. 14.  4.  5. 18. 19. 14.  1. 39.  3.  8. 55. 58.\n",
            " 61. 34.  5. 61. 39. 15. 15. 11. 61.  8.  9. 19. 61. 22. 15. 18. 16.  1.\n",
            " 12. 61. 19. 23. 15. 18.  4. 61.  9. 14. 61.  8.  1. 14.  4. 63. 61. 61.\n",
            " 61. 38. 15. 14.  7. 61. 39.  9. 13.  5. 61. 39.  8.  5. 61. 13.  1. 14.\n",
            " 24. 15. 13.  5. 61.  6. 15.  5. 61.  8.  5. 61. 19. 15. 21.  7.  8. 39.\n",
            " 62. 61. 45. 15. 61. 18.  5. 19. 39.  5.  4. 61.  8.  5. 61.  2. 25. 61.\n",
            " 39.  8.  5. 61. 46. 21. 13. 39. 21. 13. 61. 39. 18.  5.  5. 61. 61. 61.\n",
            " 27. 14.  4. 61. 19. 39. 15. 15.  4. 61.  1. 23.  8.  9. 12.  5. 61.  9.\n",
            " 14. 61. 39.  8. 15. 21.  7.  8. 39. 53. 61. 27. 14.  4. 54. 61.  1. 19.\n",
            " 61.  9. 14. 61. 21.  6.  6.  9. 19.  8. 61. 39.  8. 15. 21.  7.  8. 39.\n",
            " 61.  8.  5. 61. 19. 39. 15. 15.  4. 54. 61. 61. 61. 46.  8.  5. 61. 36.\n",
            "  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 23.  9. 39.  8. 61.  5. 25.\n",
            "  5. 19. 61. 15.  6. 61.  6. 12.  1. 13.  5. 54. 61. 29.  1. 13.  5. 61.\n",
            " 23.  8.  9.  6.  6. 12.  9. 14.  7. 61. 39.  8. 18. 15. 21.  7.  8. 61.\n",
            " 39.  8.  5. 61. 39. 21. 12.  7.  5. 25. 61. 23. 15. 15.  4. 54. 61. 61.\n",
            " 61. 27. 14.  4. 61.  2. 21. 18.  2. 12.  5.  4. 61.  1. 19. 61.  9. 39.\n",
            " 61.  3.  1. 13.  5. 55. 61. 41. 14.  5. 54. 61. 39. 23. 15. 55. 61. 41.\n",
            " 14.  5. 54. 61. 39. 23. 15. 55. 61. 27. 14.  4. 61. 39.  8. 18. 15. 21.\n",
            "  7.  8. 61.  1. 14.  4. 61. 39.  8. 18. 15. 21.  7.  8. 61. 61. 61. 46.\n",
            "  8.  5. 61. 22. 15. 18. 16.  1. 12. 61.  2. 12.  1.  4.  5. 61. 23.  5.\n",
            " 14. 39. 61. 19. 14.  9.  3. 11.  5. 18. 62. 19. 14.  1.  3. 11. 55. 61.\n",
            " 34.  5. 61. 12.  5.  6. 39. 61.  9. 39. 61.  4.  5.  1.  4. 54. 61.  1.\n",
            " 14.  4. 61. 23.  9. 39.  8. 61.  9. 39. 19. 61.  8.  5.  1.  4. 61. 61.\n",
            " 61. 34.  5. 61. 23.  5. 14. 39. 61.  7.  1. 12. 21. 13. 16.  8.  9. 14.\n",
            "  7. 61.  2.  1.  3. 11. 53. 61. 58. 27. 14.  4. 61.  8.  1. 19. 39. 61.\n",
            " 39.  8. 15. 21. 61. 19. 12.  1.  9. 14. 61. 39.  8.  5. 61. 36.  1.  2.\n",
            "  2.  5. 18. 23. 15.  3. 11. 56. 61. 61. 61. 29. 15. 13.  5. 61. 39. 15.\n",
            " 61. 13. 25. 61.  1. 18. 13. 19. 54. 61. 13. 25. 61.  2.  5.  1. 13.  9.\n",
            " 19.  8. 61.  2. 15. 25. 55. 61. 41. 61.  6. 18.  1.  2. 10. 15. 21. 19.\n",
            " 61.  4.  1. 25. 55. 61. 29.  1. 12. 12. 15. 15.  8. 55. 61. 29.  1. 12.\n",
            " 12.  1. 25. 55. 58. 61. 61. 61. 34.  5. 61.  3.  8. 15. 18. 39. 12.  5.\n",
            "  4. 61.  9. 14. 61.  8.  9. 19. 61. 10. 15. 25. 53. 61. 57. 46. 23.  1.\n",
            " 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4. 61. 39.  8.  5.\n",
            " 61. 19. 12.  9. 39.  8. 25. 61. 39. 15. 22.  5. 19. 61. 61. 61. 30.  9.\n",
            "  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.  2. 12.  5. 61.\n",
            "  9. 14. 61. 39.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27. 12. 12. 61. 13.\n",
            "  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 39.  8.  5. 61.  2. 15. 18. 15.\n",
            "  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 39.  8.  5. 61. 13.\n",
            " 15. 13.  5. 61. 18.  1. 39.  8. 19. 61. 15. 21. 39.  7. 18.  1.  2.  5.\n",
            " 53.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret7 = np.round(top_secret6)\n",
        "\n",
        "print(top_secret7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "tylU9hiHYstx",
        "outputId": "14894be4-f92c-484f-d621-3e25faac6553"
      },
      "execution_count": 161,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[57. 46. 23.  1. 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4.\n",
            " 61. 39.  8.  5. 61. 19. 12.  9. 39.  8. 25. 61. 39. 15. 22.  5. 19. 61.\n",
            " 61. 61. 30.  9.  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.\n",
            "  2. 12.  5. 61.  9. 14. 61. 39.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27.\n",
            " 12. 12. 61. 13.  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 39.  8.  5. 61.\n",
            "  2. 15. 18. 15.  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 39.\n",
            "  8.  5. 61. 13. 15. 13.  5. 61. 18.  1. 39.  8. 19. 61. 15. 21. 39.  7.\n",
            " 18.  1.  2.  5. 53. 61. 58. 28.  5. 23.  1. 18.  5. 61. 39.  8.  5. 61.\n",
            " 36.  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 13. 25. 61. 19. 15. 14.\n",
            " 55. 61. 61. 61. 46.  8.  5. 61. 10.  1. 23. 19. 61. 39.  8.  1. 39. 61.\n",
            "  2.  9. 39.  5. 54. 61. 39.  8.  5. 61.  3. 12.  1. 23. 19. 61. 39.  8.\n",
            "  1. 39. 61.  3.  1. 39.  3.  8. 55. 61. 28.  5. 23.  1. 18.  5. 61. 39.\n",
            "  8.  5. 61. 36. 21.  2. 10. 21.  2. 61.  2.  9. 18.  4. 54. 61.  1. 14.\n",
            "  4. 61. 19.  8. 21. 14. 61. 61. 61. 46.  8.  5. 61.  6. 18. 21. 13.  9.\n",
            " 15. 21. 19. 61. 28.  1. 14.  4.  5. 18. 19. 14.  1. 39.  3.  8. 55. 58.\n",
            " 61. 34.  5. 61. 39. 15. 15. 11. 61.  8.  9. 19. 61. 22. 15. 18. 16.  1.\n",
            " 12. 61. 19. 23. 15. 18.  4. 61.  9. 14. 61.  8.  1. 14.  4. 63. 61. 61.\n",
            " 61. 38. 15. 14.  7. 61. 39.  9. 13.  5. 61. 39.  8.  5. 61. 13.  1. 14.\n",
            " 24. 15. 13.  5. 61.  6. 15.  5. 61.  8.  5. 61. 19. 15. 21.  7.  8. 39.\n",
            " 62. 61. 45. 15. 61. 18.  5. 19. 39.  5.  4. 61.  8.  5. 61.  2. 25. 61.\n",
            " 39.  8.  5. 61. 46. 21. 13. 39. 21. 13. 61. 39. 18.  5.  5. 61. 61. 61.\n",
            " 27. 14.  4. 61. 19. 39. 15. 15.  4. 61.  1. 23.  8.  9. 12.  5. 61.  9.\n",
            " 14. 61. 39.  8. 15. 21.  7.  8. 39. 53. 61. 27. 14.  4. 54. 61.  1. 19.\n",
            " 61.  9. 14. 61. 21.  6.  6.  9. 19.  8. 61. 39.  8. 15. 21.  7.  8. 39.\n",
            " 61.  8.  5. 61. 19. 39. 15. 15.  4. 54. 61. 61. 61. 46.  8.  5. 61. 36.\n",
            "  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 23.  9. 39.  8. 61.  5. 25.\n",
            "  5. 19. 61. 15.  6. 61.  6. 12.  1. 13.  5. 54. 61. 29.  1. 13.  5. 61.\n",
            " 23.  8.  9.  6.  6. 12.  9. 14.  7. 61. 39.  8. 18. 15. 21.  7.  8. 61.\n",
            " 39.  8.  5. 61. 39. 21. 12.  7.  5. 25. 61. 23. 15. 15.  4. 54. 61. 61.\n",
            " 61. 27. 14.  4. 61.  2. 21. 18.  2. 12.  5.  4. 61.  1. 19. 61.  9. 39.\n",
            " 61.  3.  1. 13.  5. 55. 61. 41. 14.  5. 54. 61. 39. 23. 15. 55. 61. 41.\n",
            " 14.  5. 54. 61. 39. 23. 15. 55. 61. 27. 14.  4. 61. 39.  8. 18. 15. 21.\n",
            "  7.  8. 61.  1. 14.  4. 61. 39.  8. 18. 15. 21.  7.  8. 61. 61. 61. 46.\n",
            "  8.  5. 61. 22. 15. 18. 16.  1. 12. 61.  2. 12.  1.  4.  5. 61. 23.  5.\n",
            " 14. 39. 61. 19. 14.  9.  3. 11.  5. 18. 62. 19. 14.  1.  3. 11. 55. 61.\n",
            " 34.  5. 61. 12.  5.  6. 39. 61.  9. 39. 61.  4.  5.  1.  4. 54. 61.  1.\n",
            " 14.  4. 61. 23.  9. 39.  8. 61.  9. 39. 19. 61.  8.  5.  1.  4. 61. 61.\n",
            " 61. 34.  5. 61. 23.  5. 14. 39. 61.  7.  1. 12. 21. 13. 16.  8.  9. 14.\n",
            "  7. 61.  2.  1.  3. 11. 53. 61. 58. 27. 14.  4. 61.  8.  1. 19. 39. 61.\n",
            " 39.  8. 15. 21. 61. 19. 12.  1.  9. 14. 61. 39.  8.  5. 61. 36.  1.  2.\n",
            "  2.  5. 18. 23. 15.  3. 11. 56. 61. 61. 61. 29. 15. 13.  5. 61. 39. 15.\n",
            " 61. 13. 25. 61.  1. 18. 13. 19. 54. 61. 13. 25. 61.  2.  5.  1. 13.  9.\n",
            " 19.  8. 61.  2. 15. 25. 55. 61. 41. 61.  6. 18.  1.  2. 10. 15. 21. 19.\n",
            " 61.  4.  1. 25. 55. 61. 29.  1. 12. 12. 15. 15.  8. 55. 61. 29.  1. 12.\n",
            " 12.  1. 25. 55. 58. 61. 61. 61. 34.  5. 61.  3.  8. 15. 18. 39. 12.  5.\n",
            "  4. 61.  9. 14. 61.  8.  9. 19. 61. 10. 15. 25. 53. 61. 57. 46. 23.  1.\n",
            " 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4. 61. 39.  8.  5.\n",
            " 61. 19. 12.  9. 39.  8. 25. 61. 39. 15. 22.  5. 19. 61. 61. 61. 30.  9.\n",
            "  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.  2. 12.  5. 61.\n",
            "  9. 14. 61. 39.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27. 12. 12. 61. 13.\n",
            "  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 39.  8.  5. 61.  2. 15. 18. 15.\n",
            "  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 39.  8.  5. 61. 13.\n",
            " 15. 13.  5. 61. 18.  1. 39.  8. 19. 61. 15. 21. 39.  7. 18.  1.  2.  5.\n",
            " 53.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "top_secret7[top_secret7 == 39] = 20\n",
        "\n",
        "print(top_secret7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "bL-5-7VWY0Ai",
        "outputId": "3a55ba28-e365-4f9e-b18d-aa80da16e8dd"
      },
      "execution_count": 162,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[57. 46. 23.  1. 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4.\n",
            " 61. 20.  8.  5. 61. 19. 12.  9. 20.  8. 25. 61. 20. 15. 22.  5. 19. 61.\n",
            " 61. 61. 30.  9.  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.\n",
            "  2. 12.  5. 61.  9. 14. 61. 20.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27.\n",
            " 12. 12. 61. 13.  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 20.  8.  5. 61.\n",
            "  2. 15. 18. 15.  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 20.\n",
            "  8.  5. 61. 13. 15. 13.  5. 61. 18.  1. 20.  8. 19. 61. 15. 21. 20.  7.\n",
            " 18.  1.  2.  5. 53. 61. 58. 28.  5. 23.  1. 18.  5. 61. 20.  8.  5. 61.\n",
            " 36.  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 13. 25. 61. 19. 15. 14.\n",
            " 55. 61. 61. 61. 46.  8.  5. 61. 10.  1. 23. 19. 61. 20.  8.  1. 20. 61.\n",
            "  2.  9. 20.  5. 54. 61. 20.  8.  5. 61.  3. 12.  1. 23. 19. 61. 20.  8.\n",
            "  1. 20. 61.  3.  1. 20.  3.  8. 55. 61. 28.  5. 23.  1. 18.  5. 61. 20.\n",
            "  8.  5. 61. 36. 21.  2. 10. 21.  2. 61.  2.  9. 18.  4. 54. 61.  1. 14.\n",
            "  4. 61. 19.  8. 21. 14. 61. 61. 61. 46.  8.  5. 61.  6. 18. 21. 13.  9.\n",
            " 15. 21. 19. 61. 28.  1. 14.  4.  5. 18. 19. 14.  1. 20.  3.  8. 55. 58.\n",
            " 61. 34.  5. 61. 20. 15. 15. 11. 61.  8.  9. 19. 61. 22. 15. 18. 16.  1.\n",
            " 12. 61. 19. 23. 15. 18.  4. 61.  9. 14. 61.  8.  1. 14.  4. 63. 61. 61.\n",
            " 61. 38. 15. 14.  7. 61. 20.  9. 13.  5. 61. 20.  8.  5. 61. 13.  1. 14.\n",
            " 24. 15. 13.  5. 61.  6. 15.  5. 61.  8.  5. 61. 19. 15. 21.  7.  8. 20.\n",
            " 62. 61. 45. 15. 61. 18.  5. 19. 20.  5.  4. 61.  8.  5. 61.  2. 25. 61.\n",
            " 20.  8.  5. 61. 46. 21. 13. 20. 21. 13. 61. 20. 18.  5.  5. 61. 61. 61.\n",
            " 27. 14.  4. 61. 19. 20. 15. 15.  4. 61.  1. 23.  8.  9. 12.  5. 61.  9.\n",
            " 14. 61. 20.  8. 15. 21.  7.  8. 20. 53. 61. 27. 14.  4. 54. 61.  1. 19.\n",
            " 61.  9. 14. 61. 21.  6.  6.  9. 19.  8. 61. 20.  8. 15. 21.  7.  8. 20.\n",
            " 61.  8.  5. 61. 19. 20. 15. 15.  4. 54. 61. 61. 61. 46.  8.  5. 61. 36.\n",
            "  1.  2.  2.  5. 18. 23. 15.  3. 11. 54. 61. 23.  9. 20.  8. 61.  5. 25.\n",
            "  5. 19. 61. 15.  6. 61.  6. 12.  1. 13.  5. 54. 61. 29.  1. 13.  5. 61.\n",
            " 23.  8.  9.  6.  6. 12.  9. 14.  7. 61. 20.  8. 18. 15. 21.  7.  8. 61.\n",
            " 20.  8.  5. 61. 20. 21. 12.  7.  5. 25. 61. 23. 15. 15.  4. 54. 61. 61.\n",
            " 61. 27. 14.  4. 61.  2. 21. 18.  2. 12.  5.  4. 61.  1. 19. 61.  9. 20.\n",
            " 61.  3.  1. 13.  5. 55. 61. 41. 14.  5. 54. 61. 20. 23. 15. 55. 61. 41.\n",
            " 14.  5. 54. 61. 20. 23. 15. 55. 61. 27. 14.  4. 61. 20.  8. 18. 15. 21.\n",
            "  7.  8. 61.  1. 14.  4. 61. 20.  8. 18. 15. 21.  7.  8. 61. 61. 61. 46.\n",
            "  8.  5. 61. 22. 15. 18. 16.  1. 12. 61.  2. 12.  1.  4.  5. 61. 23.  5.\n",
            " 14. 20. 61. 19. 14.  9.  3. 11.  5. 18. 62. 19. 14.  1.  3. 11. 55. 61.\n",
            " 34.  5. 61. 12.  5.  6. 20. 61.  9. 20. 61.  4.  5.  1.  4. 54. 61.  1.\n",
            " 14.  4. 61. 23.  9. 20.  8. 61.  9. 20. 19. 61.  8.  5.  1.  4. 61. 61.\n",
            " 61. 34.  5. 61. 23.  5. 14. 20. 61.  7.  1. 12. 21. 13. 16.  8.  9. 14.\n",
            "  7. 61.  2.  1.  3. 11. 53. 61. 58. 27. 14.  4. 61.  8.  1. 19. 20. 61.\n",
            " 20.  8. 15. 21. 61. 19. 12.  1.  9. 14. 61. 20.  8.  5. 61. 36.  1.  2.\n",
            "  2.  5. 18. 23. 15.  3. 11. 56. 61. 61. 61. 29. 15. 13.  5. 61. 20. 15.\n",
            " 61. 13. 25. 61.  1. 18. 13. 19. 54. 61. 13. 25. 61.  2.  5.  1. 13.  9.\n",
            " 19.  8. 61.  2. 15. 25. 55. 61. 41. 61.  6. 18.  1.  2. 10. 15. 21. 19.\n",
            " 61.  4.  1. 25. 55. 61. 29.  1. 12. 12. 15. 15.  8. 55. 61. 29.  1. 12.\n",
            " 12.  1. 25. 55. 58. 61. 61. 61. 34.  5. 61.  3.  8. 15. 18. 20. 12.  5.\n",
            "  4. 61.  9. 14. 61.  8.  9. 19. 61. 10. 15. 25. 53. 61. 57. 46. 23.  1.\n",
            " 19. 61.  2. 18.  9. 12. 12.  9.  7. 54. 61.  1. 14.  4. 61. 20.  8.  5.\n",
            " 61. 19. 12.  9. 20.  8. 25. 61. 20. 15. 22.  5. 19. 61. 61. 61. 30.  9.\n",
            "  4. 61.  7. 25. 18.  5. 61.  1. 14.  4. 61.  7.  9. 13.  2. 12.  5. 61.\n",
            "  9. 14. 61. 20.  8.  5. 61. 23.  1.  2.  5. 64. 61. 27. 12. 12. 61. 13.\n",
            "  9. 13. 19. 25. 61. 23.  5. 18.  5. 61. 20.  8.  5. 61.  2. 15. 18. 15.\n",
            "  7. 15. 22.  5. 19. 54. 61. 61. 61. 27. 14.  4. 61. 20.  8.  5. 61. 13.\n",
            " 15. 13.  5. 61. 18.  1. 20.  8. 19. 61. 15. 21. 20.  7. 18.  1.  2.  5.\n",
            " 53.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_even = np.sum(top_secret7 % 2 == 0)\n",
        "print(num_even)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XR0st72MMthR",
        "outputId": "f3449691-bdf0-45b2-a1c3-4740b4d4004a"
      },
      "execution_count": 163,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "344\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "''.join(map(str, symbols_df.loc[top_secret7-1]['Symbol']))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        },
        "id": "Rtv7DAQSPaCP",
        "outputId": "5b7b27ca-1e12-4f3f-9c26-9c27a8518c86"
      },
      "execution_count": 164,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'\\'Twas brillig, and the slithy toves   Did gyre and gimble in the wabe: All mimsy were the borogoves,   And the mome raths outgrabe. \"Beware the Jabberwock, my son!   The jaws that bite, the claws that catch! Beware the Jubjub bird, and shun   The frumious Bandersnatch!\" He took his vorpal sword in hand;   Long time the manxome foe he sought- So rested he by the Tumtum tree   And stood awhile in thought. And, as in uffish thought he stood,   The Jabberwock, with eyes of flame, Came whiffling through the tulgey wood,   And burbled as it came! One, two! One, two! And through and through   The vorpal blade went snicker-snack! He left it dead, and with its head   He went galumphing back. \"And hast thou slain the Jabberwock?   Come to my arms, my beamish boy! O frabjous day! Callooh! Callay!\"   He chortled in his joy. \\'Twas brillig, and the slithy toves   Did gyre and gimble in the wabe: All mimsy were the borogoves,   And the mome raths outgrabe.'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 164
        }
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
